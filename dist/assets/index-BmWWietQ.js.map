{"version":3,"file":"index-BmWWietQ.js","sources":["../../client/src/api/http.client.ts","../../client/src/services/websocket.service.ts","../../client/src/services/encryption.service.ts","../../client/src/services/auth.service.ts","../../client/src/services/audio.service.ts","../../client/src/utils/helpers.ts","../../client/src/components/ui-manager.ts","../../client/src/utils/icons.ts","../../client/src/components/AuthComponent.ts","../../client/src/components/MessengerComponent.ts","../../client/src/components/ProfileComponent.ts","../../client/src/components/SettingsComponent.ts","../../client/src/app.ts"],"sourcesContent":["// HTTP API client for backend communication\n\nexport class HttpClient {\n    private baseUrl: string;\n    private token: string | null = null;\n\n    constructor(baseUrl: string = window.location.origin) {\n        this.baseUrl = baseUrl;\n    }\n\n    setToken(token: string | null) {\n        this.token = token;\n    }\n\n    private async request<T>(\n        endpoint: string,\n        options: RequestInit = {}\n    ): Promise<T> {\n        const headers: Record<string, string> = {\n            'Content-Type': 'application/json',\n            ...(options.headers as Record<string, string> || {}),\n        };\n\n        if (this.token) {\n            headers['Authorization'] = `Bearer ${this.token}`;\n        }\n\n        const response = await fetch(`${this.baseUrl}${endpoint}`, {\n            ...options,\n            headers,\n        });\n\n        const data = await response.json();\n\n        if (!response.ok) {\n            throw new Error(data.error || 'Request failed');\n        }\n\n        return data;\n    }\n\n    async login(username: string, password: string) {\n        return this.request<{\n            token: string;\n            username: string;\n            userId: string;\n        }>('/api/login', {\n            method: 'POST',\n            body: JSON.stringify({ username, password }),\n        });\n    }\n\n    async register(username: string, password: string) {\n        return this.request<{\n            userId: string;\n            username: string;\n        }>('/api/register', {\n            method: 'POST',\n            body: JSON.stringify({ username, password }),\n        });\n    }\n\n    async getUsers() {\n        return this.request<{\n            users: Array<{ username: string; userId: string }>;\n        }>('/api/users');\n    }\n\n    async getMessages(otherUser: string) {\n        return this.request<{\n            messages: any[];\n        }>(`/api/messages/${otherUser}`);\n    }\n\n    async sendMessage(to: string, messageData: any) {\n        return this.request<{\n            messageId: string;\n            message: any;\n        }>('/api/messages', {\n            method: 'POST',\n            body: JSON.stringify({ to, ...messageData }),\n        });\n    }\n\n    async searchUsers(query: string) {\n        return this.request<{\n            users: Array<{ username: string; userId: string }>;\n        }>(`/api/users/search?q=${encodeURIComponent(query)}`);\n    }\n\n    async uploadFile(file: File, to: string): Promise<{ fileUrl: string; fileName: string; fileSize: number }> {\n        const formData = new FormData();\n        formData.append('file', file);\n        formData.append('to', to);\n\n        const headers: HeadersInit = {};\n        if (this.token) {\n            headers['Authorization'] = `Bearer ${this.token}`;\n        }\n\n        const response = await fetch(`${this.baseUrl}/api/upload`, {\n            method: 'POST',\n            headers,\n            body: formData,\n        });\n\n        const data = await response.json();\n\n        if (!response.ok) {\n            throw new Error(data.error || 'Upload failed');\n        }\n\n        return data;\n    }\n}\n\nexport const httpClient = new HttpClient();\n","// WebSocket service for real-time communication\n\nimport type { WebSocketMessage } from '../types';\n\ntype MessageHandler = (data: any) => void;\n\nexport class WebSocketService {\n    private ws: WebSocket | null = null;\n    private wsUrl: string;\n    private token: string | null = null;\n    private handlers: Map<string, MessageHandler[]> = new Map();\n    private reconnectAttempts = 0;\n    private maxReconnectAttempts = 5;\n    private reconnectDelay = 3000;\n\n    constructor() {\n        const protocol = window.location.protocol === 'https:' ? 'wss' : 'ws';\n        this.wsUrl = `${protocol}://${window.location.host}`;\n    }\n\n    connect(token: string): void {\n        this.token = token;\n        this.ws = new WebSocket(this.wsUrl);\n\n        this.ws.onopen = () => {\n            console.log('WebSocket connected');\n            this.reconnectAttempts = 0;\n            this.emit('connection_status', { connected: true });\n            \n            // Authenticate\n            this.send({\n                type: 'auth',\n                token: this.token!,\n            });\n        };\n\n        this.ws.onmessage = (event) => {\n            try {\n                const data = JSON.parse(event.data);\n                this.handleMessage(data);\n            } catch (error) {\n                console.error('Error parsing WebSocket message:', error);\n            }\n        };\n\n        this.ws.onerror = (error) => {\n            console.error('WebSocket error:', error);\n            this.emit('connection_status', { connected: false, error });\n        };\n\n        this.ws.onclose = () => {\n            console.log('WebSocket disconnected');\n            this.emit('connection_status', { connected: false });\n            \n            if (this.token && this.reconnectAttempts < this.maxReconnectAttempts) {\n                setTimeout(() => {\n                    console.log('Reconnecting...');\n                    this.reconnectAttempts++;\n                    this.connect(this.token!);\n                }, this.reconnectDelay);\n            }\n        };\n    }\n\n    disconnect(): void {\n        if (this.ws) {\n            this.ws.close();\n            this.ws = null;\n        }\n        this.token = null;\n        this.reconnectAttempts = 0;\n    }\n\n    send(message: WebSocketMessage): void {\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n            this.ws.send(JSON.stringify(message));\n        } else {\n            console.warn('WebSocket is not connected');\n        }\n    }\n\n    on(event: string, handler: MessageHandler): void {\n        if (!this.handlers.has(event)) {\n            this.handlers.set(event, []);\n        }\n        this.handlers.get(event)!.push(handler);\n    }\n\n    off(event: string, handler: MessageHandler): void {\n        const handlers = this.handlers.get(event);\n        if (handlers) {\n            const index = handlers.indexOf(handler);\n            if (index > -1) {\n                handlers.splice(index, 1);\n            }\n        }\n    }\n\n    private handleMessage(data: any): void {\n        const { type, ...payload } = data;\n        this.emit(type, payload);\n    }\n\n    private emit(event: string, data: any): void {\n        const handlers = this.handlers.get(event);\n        if (handlers) {\n            handlers.forEach(handler => handler(data));\n        }\n    }\n\n    isConnected(): boolean {\n        return this.ws !== null && this.ws.readyState === WebSocket.OPEN;\n    }\n}\n\nexport const wsService = new WebSocketService();\n","// End-to-end encryption service using Web Crypto API\n\nexport class EncryptionService {\n    private key: CryptoKey | null = null;\n\n    isSecureContext(): boolean {\n        return window.isSecureContext && \n               typeof crypto !== 'undefined' && \n               typeof crypto.subtle !== 'undefined';\n    }\n\n    async generateKey(): Promise<CryptoKey | null> {\n        if (!this.isSecureContext()) {\n            console.warn('Encryption not available in insecure context (HTTP). Use HTTPS for encryption.');\n            return null;\n        }\n\n        try {\n            this.key = await crypto.subtle.generateKey(\n                { name: 'AES-GCM', length: 256 },\n                true,\n                ['encrypt', 'decrypt']\n            );\n            return this.key;\n        } catch (error) {\n            console.error('Failed to generate encryption key:', error);\n            return null;\n        }\n    }\n\n    async encrypt(message: string, key?: CryptoKey): Promise<{ encrypted: number[]; iv: number[] } | null> {\n        const encryptionKey = key || this.key;\n        if (!encryptionKey || !this.isSecureContext()) {\n            return null;\n        }\n\n        try {\n            const encoder = new TextEncoder();\n            const data = encoder.encode(message);\n            const iv = crypto.getRandomValues(new Uint8Array(12));\n\n            const encrypted = await crypto.subtle.encrypt(\n                { name: 'AES-GCM', iv },\n                encryptionKey,\n                data\n            );\n\n            return {\n                encrypted: Array.from(new Uint8Array(encrypted)),\n                iv: Array.from(iv)\n            };\n        } catch (error) {\n            console.error('Encryption failed:', error);\n            return null;\n        }\n    }\n\n    async decrypt(encryptedData: number[], iv: number[], key?: CryptoKey): Promise<string> {\n        const decryptionKey = key || this.key;\n        if (!decryptionKey || !this.isSecureContext()) {\n            return '[Шифрование недоступно]';\n        }\n\n        try {\n            const decrypted = await crypto.subtle.decrypt(\n                { name: 'AES-GCM', iv: new Uint8Array(iv) },\n                decryptionKey,\n                new Uint8Array(encryptedData)\n            );\n\n            const decoder = new TextDecoder();\n            return decoder.decode(decrypted);\n        } catch (error) {\n            console.error('Decryption failed:', error);\n            return '[Ошибка расшифровки]';\n        }\n    }\n\n    getKey(): CryptoKey | null {\n        return this.key;\n    }\n}\n\nexport const encryptionService = new EncryptionService();\n","// Authentication service\n\nimport { httpClient } from '../api/http.client';\nimport { wsService } from './websocket.service';\nimport { encryptionService } from './encryption.service';\nimport type { User } from '../types';\n\nexport class AuthService {\n    private currentUser: User | null = null;\n    private currentToken: string | null = null;\n\n    async login(username: string, password: string): Promise<User> {\n        const data = await httpClient.login(username, password);\n        \n        this.currentUser = {\n            username: data.username,\n            userId: data.userId,\n        };\n        this.currentToken = data.token;\n\n        // Store in localStorage\n        localStorage.setItem('token', data.token);\n        localStorage.setItem('username', data.username);\n        localStorage.setItem('userId', data.userId);\n\n        // Set token for HTTP client\n        httpClient.setToken(data.token);\n\n        // Generate encryption key\n        await encryptionService.generateKey();\n\n        // Connect WebSocket\n        wsService.connect(data.token);\n\n        return this.currentUser;\n    }\n\n    async register(username: string, password: string): Promise<void> {\n        await httpClient.register(username, password);\n    }\n\n    logout(): void {\n        // Disconnect WebSocket\n        wsService.disconnect();\n\n        // Clear state\n        this.currentUser = null;\n        this.currentToken = null;\n\n        // Clear localStorage\n        localStorage.removeItem('token');\n        localStorage.removeItem('username');\n        localStorage.removeItem('userId');\n\n        // Clear HTTP client token\n        httpClient.setToken(null);\n    }\n\n    getCurrentUser(): User | null {\n        return this.currentUser;\n    }\n\n    getCurrentToken(): string | null {\n        return this.currentToken;\n    }\n\n    isAuthenticated(): boolean {\n        return this.currentUser !== null && this.currentToken !== null;\n    }\n\n    async tryRestoreSession(): Promise<User | null> {\n        const token = localStorage.getItem('token');\n        const username = localStorage.getItem('username');\n        const userId = localStorage.getItem('userId');\n\n        if (token && username && userId) {\n            this.currentUser = { username, userId };\n            this.currentToken = token;\n            \n            httpClient.setToken(token);\n            await encryptionService.generateKey();\n            wsService.connect(token);\n\n            return this.currentUser;\n        }\n\n        return null;\n    }\n}\n\nexport const authService = new AuthService();\n","// Audio and voice recording service\n\nexport class AudioService {\n    private mediaRecorder: MediaRecorder | null = null;\n    private audioChunks: Blob[] = [];\n    private stream: MediaStream | null = null;\n    private analyser: AnalyserNode | null = null;\n    private audioContext: AudioContext | null = null;\n\n    async startRecording(): Promise<void> {\n        try {\n            this.stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n            \n            // Setup audio context for visualization\n            this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n            const source = this.audioContext.createMediaStreamSource(this.stream);\n            this.analyser = this.audioContext.createAnalyser();\n            this.analyser.fftSize = 256;\n            source.connect(this.analyser);\n\n            // Setup media recorder\n            this.mediaRecorder = new MediaRecorder(this.stream, {\n                mimeType: 'audio/webm;codecs=opus'\n            });\n\n            this.audioChunks = [];\n\n            this.mediaRecorder.ondataavailable = (event) => {\n                if (event.data.size > 0) {\n                    this.audioChunks.push(event.data);\n                }\n            };\n\n            this.mediaRecorder.start();\n        } catch (error) {\n            console.error('Failed to start recording:', error);\n            throw new Error('Не удалось получить доступ к микрофону');\n        }\n    }\n\n    stopRecording(): Promise<Blob> {\n        return new Promise((resolve, reject) => {\n            if (!this.mediaRecorder) {\n                reject(new Error('Recording not started'));\n                return;\n            }\n\n            this.mediaRecorder.onstop = () => {\n                const blob = new Blob(this.audioChunks, { type: 'audio/webm' });\n                this.cleanup();\n                resolve(blob);\n            };\n\n            this.mediaRecorder.stop();\n        });\n    }\n\n    cancelRecording(): void {\n        if (this.mediaRecorder && this.mediaRecorder.state !== 'inactive') {\n            this.mediaRecorder.stop();\n        }\n        this.cleanup();\n    }\n\n    private cleanup(): void {\n        if (this.stream) {\n            this.stream.getTracks().forEach(track => track.stop());\n            this.stream = null;\n        }\n        if (this.audioContext) {\n            this.audioContext.close();\n            this.audioContext = null;\n        }\n        this.analyser = null;\n        this.mediaRecorder = null;\n        this.audioChunks = [];\n    }\n\n    getAnalyser(): AnalyserNode | null {\n        return this.analyser;\n    }\n\n    playNotificationSound(): void {\n        try {\n            const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n            const oscillator = audioContext.createOscillator();\n            const gainNode = audioContext.createGain();\n\n            oscillator.connect(gainNode);\n            gainNode.connect(audioContext.destination);\n\n            oscillator.frequency.value = 800;\n            oscillator.type = 'sine';\n\n            gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);\n            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.3);\n\n            oscillator.start(audioContext.currentTime);\n            oscillator.stop(audioContext.currentTime + 0.3);\n        } catch (error) {\n            console.error('Failed to play notification sound:', error);\n        }\n    }\n}\n\nexport const audioService = new AudioService();\n","// Utility functions\n\nexport function escapeHtml(text: string): string {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n}\n\nexport function formatTime(timestamp: string): string {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diff = now.getTime() - date.getTime();\n    const diffDays = Math.floor(diff / (1000 * 60 * 60 * 24));\n\n    if (diffDays === 0) {\n        return date.toLocaleTimeString('ru-RU', {\n            hour: '2-digit',\n            minute: '2-digit'\n        });\n    } else if (diffDays === 1) {\n        return 'Вчера';\n    } else if (diffDays < 7) {\n        return date.toLocaleDateString('ru-RU', { weekday: 'short' });\n    } else {\n        return date.toLocaleDateString('ru-RU', {\n            day: '2-digit',\n            month: '2-digit'\n        });\n    }\n}\n\nexport function formatFileSize(bytes: number): string {\n    if (bytes === 0) return '0 Б';\n    const k = 1024;\n    const sizes = ['Б', 'КБ', 'МБ', 'ГБ'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return Math.round((bytes / Math.pow(k, i)) * 100) / 100 + ' ' + sizes[i];\n}\n\nexport function getAvatarColor(username: string): [string, string] {\n    const colors = [\n        ['#667eea', '#764ba2'],\n        ['#f093fb', '#f5576c'],\n        ['#4facfe', '#00f2fe'],\n        ['#43e97b', '#38f9d7'],\n        ['#fa709a', '#fee140'],\n        ['#30cfd0', '#330867'],\n        ['#a8edea', '#fed6e3'],\n        ['#ff9a9e', '#fecfef'],\n        ['#ffecd2', '#fcb69f'],\n        ['#ff6e7f', '#bfe9ff']\n    ];\n\n    let hash = 0;\n    for (let i = 0; i < username.length; i++) {\n        hash = username.charCodeAt(i) + ((hash << 5) - hash);\n    }\n\n    const index = Math.abs(hash) % colors.length;\n    return colors[index] as [string, string];\n}\n\nexport function debounce<T extends (...args: any[]) => any>(\n    func: T,\n    wait: number\n): (...args: Parameters<T>) => void {\n    let timeout: ReturnType<typeof setTimeout> | null = null;\n\n    return function (this: any, ...args: Parameters<T>) {\n        const context = this;\n\n        if (timeout) {\n            clearTimeout(timeout);\n        }\n\n        timeout = setTimeout(() => {\n            func.apply(context, args);\n        }, wait);\n    };\n}\n\nexport function generateId(): string {\n    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n}\n\nexport async function requestNotificationPermission(): Promise<void> {\n    if ('Notification' in window && Notification.permission === 'default') {\n        await Notification.requestPermission();\n    }\n}\n\nexport function showBrowserNotification(title: string, body: string, tag?: string): void {\n    if ('Notification' in window && Notification.permission === 'granted') {\n        new Notification(title, {\n            body,\n            icon: '/favicon.ico',\n            tag,\n            requireInteraction: false\n        });\n    }\n}\n","// UI Manager for DOM manipulation and component rendering\n\nimport { escapeHtml, formatTime, getAvatarColor } from '../utils/helpers';\nimport type { User, Chat, Message } from '../types';\n\nexport class UIManager {\n    // Show/hide screens\n    showAuthScreen(): void {\n        document.getElementById('authScreen')?.style.setProperty('display', 'flex');\n        document.getElementById('messengerContainer')?.classList.remove('active');\n        document.getElementById('profileScreen')?.classList.remove('active');\n        document.getElementById('settingsScreen')?.classList.remove('active');\n    }\n\n    showMessengerScreen(): void {\n        document.getElementById('authScreen')?.style.setProperty('display', 'none');\n        document.getElementById('messengerContainer')?.classList.add('active');\n        document.getElementById('profileScreen')?.classList.remove('active');\n        document.getElementById('settingsScreen')?.classList.remove('active');\n    }\n\n    showLoginForm(): void {\n        const loginForm = document.getElementById('loginForm');\n        const registerForm = document.getElementById('registerForm');\n        if (loginForm) loginForm.style.display = 'block';\n        if (registerForm) registerForm.style.display = 'none';\n        this.clearMessages();\n    }\n\n    showRegisterForm(): void {\n        const loginForm = document.getElementById('loginForm');\n        const registerForm = document.getElementById('registerForm');\n        if (loginForm) loginForm.style.display = 'none';\n        if (registerForm) registerForm.style.display = 'block';\n        this.clearMessages();\n    }\n\n    clearMessages(): void {\n        const loginMsg = document.getElementById('loginMessage');\n        const registerMsg = document.getElementById('registerMessage');\n        if (loginMsg) loginMsg.innerHTML = '';\n        if (registerMsg) registerMsg.innerHTML = '';\n    }\n\n    showError(elementId: string, message: string): void {\n        const el = document.getElementById(elementId);\n        if (el) {\n            el.innerHTML = `<div class=\"error-message\">${escapeHtml(message)}</div>`;\n        }\n    }\n\n    showSuccess(elementId: string, message: string): void {\n        const el = document.getElementById(elementId);\n        if (el) {\n            el.innerHTML = `<div class=\"success-message\">${escapeHtml(message)}</div>`;\n        }\n    }\n\n    updateUserInfo(user: User): void {\n        const userNameEl = document.getElementById('userName');\n        const userAvatarEl = document.getElementById('userAvatar');\n        \n        if (userNameEl) {\n            userNameEl.innerHTML = `${escapeHtml(user.username)}<span class=\"user-id\">#${user.userId}</span>`;\n        }\n\n        if (userAvatarEl) {\n            userAvatarEl.textContent = user.username[0].toUpperCase();\n            const [color1, color2] = getAvatarColor(user.username);\n            userAvatarEl.style.background = `linear-gradient(135deg, ${color1} 0%, ${color2} 100%)`;\n        }\n    }\n\n    updateConnectionStatus(connected: boolean, text?: string): void {\n        const statusEl = document.getElementById('connectionStatus');\n        const textEl = document.getElementById('connectionText');\n\n        if (statusEl && textEl) {\n            statusEl.className = connected ? 'connection-status connected' : 'connection-status disconnected';\n            textEl.textContent = text || (connected ? 'Подключено' : 'Отключено');\n        }\n    }\n\n    renderChatsList(chats: Chat[]): void {\n        const chatsListEl = document.getElementById('chatsList');\n        if (!chatsListEl) return;\n\n        if (chats.length === 0) {\n            chatsListEl.innerHTML = `\n                <div class=\"empty-state\" style=\"padding: 40px 20px;\">\n                    <p style=\"text-align: center; color: #718096;\">Нет чатов. Начните новый диалог!</p>\n                </div>\n            `;\n            return;\n        }\n\n        const html = chats.map(chat => {\n            const [color1, color2] = getAvatarColor(chat.username);\n            const unreadBadge = chat.unreadCount ? \n                `<span class=\"unread-badge\">${chat.unreadCount}</span>` : '';\n            const onlineBadge = chat.online ? \n                '<div class=\"online-badge\"></div>' : '';\n\n            return `\n                <div class=\"chat-item\" data-username=\"${escapeHtml(chat.username)}\" onclick=\"window.app.openChat('${escapeHtml(chat.username)}')\">\n                    <div class=\"chat-avatar\" style=\"background: linear-gradient(135deg, ${color1} 0%, ${color2} 100%);\">\n                        ${chat.username[0].toUpperCase()}\n                        ${onlineBadge}\n                    </div>\n                    <div class=\"chat-info\">\n                        <div class=\"chat-header\">\n                            <div class=\"chat-name\">\n                                ${escapeHtml(chat.username)}\n                                <span class=\"user-id\">#${chat.userId}</span>\n                            </div>\n                            <div class=\"chat-time\">${chat.time || ''}</div>\n                        </div>\n                        <div class=\"chat-preview\">${chat.lastMessage || 'Начните общение'}</div>\n                    </div>\n                    ${unreadBadge}\n                </div>\n            `;\n        }).join('');\n\n        chatsListEl.innerHTML = html;\n    }\n\n    renderMessage(message: Message, isSent: boolean): string {\n        const username = isSent ? 'Вы' : message.from;\n        const [color1, color2] = getAvatarColor(username);\n        const time = formatTime(message.time || message.timestamp);\n        const sentClass = isSent ? 'sent' : '';\n\n        // Reply quote if exists\n        let replyHtml = '';\n        if (message.replyTo) {\n            replyHtml = `\n                <div class=\"message-reply-quote\" onclick=\"window.app.scrollToMessage('${message.replyTo.id}')\">\n                    <div class=\"message-reply-content\">\n                        <div class=\"message-reply-sender\">${escapeHtml(message.replyTo.from)}</div>\n                        <div class=\"message-reply-text\">${escapeHtml(message.replyTo.text)}</div>\n                    </div>\n                </div>\n            `;\n        }\n\n        // Message content\n        let contentHtml = '';\n        if (message.mediaType) {\n            contentHtml = this.renderMediaMessage(message);\n        } else {\n            const editedTag = message.edited ? '<span class=\"message-edited\">(изменено)</span>' : '';\n            contentHtml = `${escapeHtml(message.text)} ${editedTag}`;\n        }\n\n        return `\n            <div class=\"message ${sentClass}\" data-message-id=\"${message.id}\">\n                <div class=\"message-avatar\" style=\"background: linear-gradient(135deg, ${color1} 0%, ${color2} 100%);\">\n                    ${username[0].toUpperCase()}\n                </div>\n                <div class=\"message-content\">\n                    ${replyHtml}\n                    <div class=\"message-bubble\">\n                        ${contentHtml}\n                    </div>\n                    <div class=\"message-time\">\n                        ${time}\n                        ${isSent ? this.renderReadStatus(message.read) : ''}\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    private renderMediaMessage(message: Message): string {\n        // Simplified media rendering\n        switch (message.mediaType) {\n            case 'image':\n                return `<div class=\"media-message\"><img src=\"${message.mediaUrl}\" alt=\"Image\" onclick=\"window.app.openImage('${message.mediaUrl}')\"></div>`;\n            case 'video':\n                return `<div class=\"media-message\"><video src=\"${message.mediaUrl}\" controls></video></div>`;\n            case 'voice':\n                return `<div class=\"voice-message\">🎤 Голосовое сообщение ${message.duration || '0:00'}</div>`;\n            case 'file':\n                return `<div class=\"file-message\" onclick=\"window.open('${message.mediaUrl}')\">📎 ${message.fileName} (${message.fileSize})</div>`;\n            default:\n                return escapeHtml(message.text);\n        }\n    }\n\n    private renderReadStatus(read?: boolean): string {\n        if (read) {\n            return `<span class=\"message-read-status\"><svg width=\"14\" height=\"14\" class=\"read\"><use href=\"#icon-check-double\"></use></svg></span>`;\n        }\n        return `<span class=\"message-read-status\"><svg width=\"14\" height=\"14\"><use href=\"#icon-check-single\"></use></svg></span>`;\n    }\n\n    appendMessage(html: string): void {\n        const messagesArea = document.getElementById('messagesArea');\n        if (messagesArea) {\n            const temp = document.createElement('div');\n            temp.innerHTML = html;\n            const messageEl = temp.firstElementChild;\n            if (messageEl) {\n                messagesArea.appendChild(messageEl);\n                messagesArea.scrollTop = messagesArea.scrollHeight;\n            }\n        }\n    }\n\n    clearChatArea(): void {\n        const chatArea = document.getElementById('chatArea');\n        if (chatArea) {\n            chatArea.innerHTML = `\n                <div class=\"empty-state\">\n                    <div class=\"empty-state-icon\"><svg class=\"icon-svg\" width=\"80\" height=\"80\" style=\"color: #718096;\"><use href=\"#icon-chat\"></use></svg></div>\n                    <h3>Выберите чат</h3>\n                    <p>Выберите пользователя из списка слева, чтобы начать общение</p>\n                </div>\n            `;\n        }\n    }\n\n    setButtonLoading(buttonId: string, loading: boolean, originalText?: string): void {\n        const btn = document.getElementById(buttonId) as HTMLButtonElement;\n        if (btn) {\n            btn.disabled = loading;\n            if (loading && originalText) {\n                btn.textContent = originalText;\n            }\n        }\n    }\n}\n\nexport const uiManager = new UIManager();\n","export const SVG_ICONS = {\n  lockAuth: `\n    <rect x=\"5\" y=\"11\" width=\"14\" height=\"11\" rx=\"2\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\"/>\n    <path d=\"M8 11V7a4 4 0 0 1 8 0v4\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"round\"/>\n    <circle cx=\"12\" cy=\"16\" r=\"1.5\" fill=\"currentColor\"/>\n  `,\n  chat: `\n    <path d=\"M20 2H4c-1.1 0-2 .9-2 2v18l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2z\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\"/>\n  `,\n  user: `\n    <circle cx=\"12\" cy=\"8\" r=\"5\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\"/>\n    <path d=\"M3 21c0-4.4 3.6-8 8-1s8 3.6 8 8\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"round\"/>\n  `,\n  settings: `\n    <circle cx=\"12\" cy=\"12\" r=\"3\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\"/>\n    <path d=\"M12 1v6m0 6v6M5.6 5.6l4.2 4.2m4.2 4.2l4.2 4.2M1 12h6m6 0h6M5.6 18.4l4.2-4.2m4.2-4.2l4.2-4.2\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"/>\n  `,\n  checkSingle: `\n    <polyline points=\"20 6 9 17 4 12\" stroke=\"currentColor\" stroke-width=\"2.5\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n  `,\n  checkDouble: `\n    <polyline points=\"17 6 6 17 1 12\" stroke=\"currentColor\" stroke-width=\"2.5\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n    <polyline points=\"23 6 12 17\" stroke=\"currentColor\" stroke-width=\"2.5\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n  `,\n  plus: `\n    <path d=\"M12 5v14M5 12h14\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"round\"/>\n  `,\n  arrowLeft: `\n    <path d=\"M19 12H5M12 19l-7-7 7-7\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n  `,\n  attach: `\n    <path d=\"M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n  `,\n  mic: `\n    <path d=\"M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\"/>\n    <path d=\"M19 10v2a7 7 0 0 1-14 0v-2M12 19v4M8 23h8\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"round\"/>\n  `,\n  send: `\n    <path d=\"M22 2L11 13M22 2l-7 20-4-9-9-4 20-7z\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n  `,\n  close: `\n    <path d=\"M18 6L6 18M6 6l12 12\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n  `,\n  search: `\n    <circle cx=\"11\" cy=\"11\" r=\"8\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\"/>\n    <path d=\"m21 21-4.35-4.35\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"round\"/>\n  `,\n  pin: `\n    <path d=\"M16 3v4m0 0h-2.5A2.5 2.5 0 0 0 11 9.5V12l-3 3v2h8v-2l-3-3V9.5A2.5 2.5 0 0 0 10.5 7H16z\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n  `,\n  reply: `\n    <path d=\"M9 17l-5-5 5-5M4 12h11a4 4 0 0 1 0 8h-1\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n  `,\n  forward: `\n    <path d=\"m15 17 5-5-5-5M20 12H9a4 4 0 0 0 0 8h1\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n  `,\n  edit: `\n    <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n    <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n  `,\n  trash: `\n    <path d=\"M3 6h18M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n  `,\n  moreVert: `\n    <circle cx=\"12\" cy=\"12\" r=\"1\" fill=\"currentColor\"/>\n    <circle cx=\"12\" cy=\"5\" r=\"1\" fill=\"currentColor\"/>\n    <circle cx=\"12\" cy=\"19\" r=\"1\" fill=\"currentColor\"/>\n  `,\n  play: `\n    <polygon points=\"5 3 19 12 5 21 5 3\" fill=\"currentColor\"/>\n  `,\n  pause: `\n    <rect x=\"6\" y=\"4\" width=\"4\" height=\"16\" fill=\"currentColor\"/>\n    <rect x=\"14\" y=\"4\" width=\"4\" height=\"16\" fill=\"currentColor\"/>\n  `,\n  image: `\n    <rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\"/>\n    <circle cx=\"8.5\" cy=\"8.5\" r=\"1.5\" fill=\"currentColor\"/>\n    <path d=\"m21 15-5-5L5 21\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n  `,\n  file: `\n    <path d=\"M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n    <path d=\"M13 2v7h7\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n  `,\n  download: `\n    <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4M7 10l5 5 5-5M12 15V3\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n  `,\n  lock: `\n    <rect x=\"3\" y=\"11\" width=\"18\" height=\"11\" rx=\"2\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\"/>\n    <path d=\"M7 11V7a5 5 0 0 1 10 0v4\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"round\"/>\n  `,\n  online: `\n    <circle cx=\"12\" cy=\"12\" r=\"10\" fill=\"currentColor\"/>\n  `\n};\n\nexport function createSVGIcon(iconName: keyof typeof SVG_ICONS, width = 24, height = 24, className = ''): string {\n  const iconContent = SVG_ICONS[iconName];\n  if (!iconContent) {\n    console.warn(`Icon \"${iconName}\" not found`);\n    return '';\n  }\n  return `<svg class=\"${className}\" width=\"${width}\" height=\"${height}\" viewBox=\"0 0 24 24\">${iconContent}</svg>`;\n}\n\nexport function initSVGSprite(): void {\n  const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n  svg.style.display = 'none';\n  \n  const defs = document.createElementNS('http://www.w3.org/2000/svg', 'defs');\n  \n  Object.entries(SVG_ICONS).forEach(([name, content]) => {\n    const symbol = document.createElementNS('http://www.w3.org/2000/svg', 'symbol');\n    symbol.id = `icon-${name}`;\n    symbol.setAttribute('viewBox', '0 0 24 24');\n    symbol.innerHTML = content;\n    defs.appendChild(symbol);\n  });\n  \n  svg.appendChild(defs);\n  document.body.insertBefore(svg, document.body.firstChild);\n}\n","import { createSVGIcon } from '../utils/icons';\n\nexport class AuthComponent {\n  private container: HTMLElement | null = null;\n\n  create(): HTMLElement {\n    this.container = document.createElement('div');\n    this.container.id = 'authScreen';\n    this.container.className = 'auth-screen';\n    \n    this.container.innerHTML = `\n      <div class=\"auth-box\">\n        <div class=\"auth-logo\">\n          ${createSVGIcon('lockAuth', 64, 64)}\n        </div>\n        <h1>ЭГИДА</h1>\n        <div class=\"auth-subtitle\">Защищенный мессенджер</div>\n        \n        <div id=\"loginForm\">\n          <input type=\"text\" id=\"loginUsername\" placeholder=\"Логин\" />\n          <input type=\"password\" id=\"loginPassword\" placeholder=\"Пароль\" />\n          <button id=\"loginBtn\">Войти</button>\n          <div id=\"loginMessage\"></div>\n          <div class=\"auth-switch\">\n            Нет аккаунта? <a href=\"#\" id=\"showRegisterLink\">Зарегистрироваться</a>\n          </div>\n        </div>\n\n        <div id=\"registerForm\" style=\"display: none;\">\n          <input type=\"text\" id=\"registerUsername\" placeholder=\"Логин\" />\n          <input type=\"password\" id=\"registerPassword\" placeholder=\"Пароль\" />\n          <input type=\"password\" id=\"registerPasswordConfirm\" placeholder=\"Подтвердите пароль\" />\n          <button id=\"registerBtn\">Зарегистрироваться</button>\n          <div id=\"registerMessage\"></div>\n          <div class=\"auth-switch\">\n            Уже есть аккаунт? <a href=\"#\" id=\"showLoginLink\">Войти</a>\n          </div>\n        </div>\n      </div>\n    `;\n    \n    return this.container;\n  }\n\n  show(): void {\n    if (this.container) {\n      this.container.style.display = 'flex';\n    }\n  }\n\n  hide(): void {\n    if (this.container) {\n      this.container.style.display = 'none';\n    }\n  }\n}\n","import { createSVGIcon } from '../utils/icons';\n\nexport class MessengerComponent {\n  private container: HTMLElement | null = null;\n\n  create(): HTMLElement {\n    this.container = document.createElement('div');\n    this.container.id = 'messengerContainer';\n    this.container.className = 'messenger-container';\n    \n    this.container.innerHTML = `\n      <div class=\"sidebar\">\n        <div class=\"sidebar-header\">\n          <h2>Чаты</h2>\n          <button class=\"new-chat-btn\" id=\"newChatBtn\">\n            ${createSVGIcon('plus', 18, 18)}\n            Новый чат\n          </button>\n          <button class=\"logout-btn\" id=\"logoutBtn\">Выйти</button>\n        </div>\n        <div class=\"connection-status\" id=\"connectionStatus\">\n          <div class=\"connection-indicator\"></div>\n          <span id=\"connectionText\">Подключение...</span>\n        </div>\n        <div class=\"user-info\">\n          <div class=\"user-avatar\" id=\"userAvatar\">A</div>\n          <div class=\"user-details\">\n            <div class=\"user-name\" id=\"userName\">Пользователь</div>\n            <div class=\"user-status\">\n              ${createSVGIcon('online', 12, 12, 'icon-svg')}\n              В сети\n            </div>\n          </div>\n        </div>\n        <div class=\"search-box\">\n          <input type=\"text\" id=\"searchChatsInput\" placeholder=\"Поиск чатов...\" />\n        </div>\n        <div class=\"chats-list\" id=\"chatsList\">\n          <div class=\"empty-state\" style=\"padding: 40px 20px;\">\n            <p style=\"text-align: center; color: #718096;\">Пользователи загружаются...</p>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"chat-area\" id=\"chatArea\">\n        <div class=\"empty-state\">\n          <div class=\"empty-state-icon\">\n            ${createSVGIcon('chat', 80, 80, 'icon-svg')}\n          </div>\n          <h3>Выберите чат</h3>\n          <p>Выберите пользователя из списка слева, чтобы начать общение</p>\n        </div>\n      </div>\n    `;\n    \n    return this.container;\n  }\n\n  show(): void {\n    if (this.container) {\n      this.container.classList.add('active');\n    }\n  }\n\n  hide(): void {\n    if (this.container) {\n      this.container.classList.remove('active');\n    }\n  }\n}\n","import { createSVGIcon } from '../utils/icons';\n\nexport class ProfileComponent {\n  private container: HTMLElement | null = null;\n\n  create(): HTMLElement {\n    this.container = document.createElement('div');\n    this.container.id = 'profileScreen';\n    this.container.className = 'profile-screen';\n    \n    this.container.innerHTML = `\n      <div class=\"profile-header\">\n        <div class=\"profile-avatar-large\" id=\"profileAvatar\">A</div>\n        <div class=\"profile-username\" id=\"profileUsername\">Пользователь</div>\n        <div class=\"profile-status\">\n          ${createSVGIcon('online', 14, 14, 'icon-svg')}\n          В сети\n        </div>\n      </div>\n      <div class=\"bottom-navigation\">\n        <div class=\"bottom-nav-items\">\n          <div class=\"bottom-nav-item\" data-screen=\"messenger\">\n            ${createSVGIcon('chat', 24, 24)}\n            <span>Чаты</span>\n          </div>\n          <div class=\"bottom-nav-item active\" data-screen=\"profile\">\n            ${createSVGIcon('user', 24, 24)}\n            <span>Профиль</span>\n          </div>\n          <div class=\"bottom-nav-item\" data-screen=\"settings\">\n            ${createSVGIcon('settings', 24, 24)}\n            <span>Настройки</span>\n          </div>\n        </div>\n      </div>\n    `;\n    \n    return this.container;\n  }\n\n  show(): void {\n    if (this.container) {\n      this.container.classList.add('active');\n    }\n  }\n\n  hide(): void {\n    if (this.container) {\n      this.container.classList.remove('active');\n    }\n  }\n}\n","import { createSVGIcon } from '../utils/icons';\n\nexport class SettingsComponent {\n  private container: HTMLElement | null = null;\n\n  create(): HTMLElement {\n    this.container = document.createElement('div');\n    this.container.id = 'settingsScreen';\n    this.container.className = 'settings-screen';\n    \n    this.container.innerHTML = `\n      <div class=\"settings-header\">\n        <h2>Настройки</h2>\n      </div>\n      <div class=\"bottom-navigation\">\n        <div class=\"bottom-nav-items\">\n          <div class=\"bottom-nav-item\" data-screen=\"messenger\">\n            ${createSVGIcon('chat', 24, 24)}\n            <span>Чаты</span>\n          </div>\n          <div class=\"bottom-nav-item\" data-screen=\"profile\">\n            ${createSVGIcon('user', 24, 24)}\n            <span>Профиль</span>\n          </div>\n          <div class=\"bottom-nav-item active\" data-screen=\"settings\">\n            ${createSVGIcon('settings', 24, 24)}\n            <span>Настройки</span>\n          </div>\n        </div>\n      </div>\n    `;\n    \n    return this.container;\n  }\n\n  show(): void {\n    if (this.container) {\n      this.container.classList.add('active');\n    }\n  }\n\n  hide(): void {\n    if (this.container) {\n      this.container.classList.remove('active');\n    }\n  }\n}\n","// Main application class\n\nimport { authService } from './services/auth.service';\nimport { httpClient } from './api/http.client';\nimport { wsService } from './services/websocket.service';\nimport { audioService } from './services/audio.service';\nimport { uiManager } from './components/ui-manager';\nimport { requestNotificationPermission, showBrowserNotification } from './utils/helpers';\nimport { initSVGSprite } from './utils/icons';\nimport { AuthComponent } from './components/AuthComponent';\nimport { MessengerComponent } from './components/MessengerComponent';\nimport { ProfileComponent } from './components/ProfileComponent';\nimport { SettingsComponent } from './components/SettingsComponent';\nimport type { User, Chat, Message } from './types';\n\nclass MessengerApp {\n    private currentChat: Chat | null = null;\n    private users: User[] = [];\n    private chats: Chat[] = [];\n    private unreadMessages: Map<string, number> = new Map();\n    private onlineUsers: Set<string> = new Set();\n\n    async init(): Promise<void> {\n        console.log('Initializing Messenger App...');\n\n        // Initialize SVG sprite\n        initSVGSprite();\n\n        // Initialize UI components\n        this.initializeComponents();\n\n        // Setup event listeners\n        this.setupEventListeners();\n\n        // Setup WebSocket event handlers\n        this.setupWebSocketHandlers();\n\n        // Try to restore session\n        const user = await authService.tryRestoreSession();\n        if (user) {\n            uiManager.updateUserInfo(user);\n            uiManager.showMessengerScreen();\n            await this.loadUsers();\n            await requestNotificationPermission();\n        } else {\n            uiManager.showAuthScreen();\n            uiManager.showLoginForm();\n        }\n\n        // Setup global app reference for inline event handlers\n        (window as any).app = this;\n    }\n\n    private initializeComponents(): void {\n        const appContainer = document.getElementById('app');\n        if (!appContainer) {\n            console.error('App container not found!');\n            return;\n        }\n\n        // Create and append all components\n        const authComponent = new AuthComponent();\n        const messengerComponent = new MessengerComponent();\n        const profileComponent = new ProfileComponent();\n        const settingsComponent = new SettingsComponent();\n\n        appContainer.appendChild(authComponent.create());\n        appContainer.appendChild(messengerComponent.create());\n        appContainer.appendChild(profileComponent.create());\n        appContainer.appendChild(settingsComponent.create());\n    }\n\n    private setupEventListeners(): void {\n        // Auth form handlers\n        document.getElementById('showRegisterLink')?.addEventListener('click', (e) => {\n            e.preventDefault();\n            uiManager.showRegisterForm();\n        });\n\n        document.getElementById('showLoginLink')?.addEventListener('click', (e) => {\n            e.preventDefault();\n            uiManager.showLoginForm();\n        });\n\n        document.getElementById('loginBtn')?.addEventListener('click', () => {\n            const username = (document.getElementById('loginUsername') as HTMLInputElement)?.value || '';\n            const password = (document.getElementById('loginPassword') as HTMLInputElement)?.value || '';\n            this.login(username, password);\n        });\n\n        document.getElementById('registerBtn')?.addEventListener('click', () => {\n            const username = (document.getElementById('registerUsername') as HTMLInputElement)?.value || '';\n            const password = (document.getElementById('registerPassword') as HTMLInputElement)?.value || '';\n            const passwordConfirm = (document.getElementById('registerPasswordConfirm') as HTMLInputElement)?.value || '';\n            this.register(username, password, passwordConfirm);\n        });\n\n        document.getElementById('logoutBtn')?.addEventListener('click', () => {\n            this.logout();\n        });\n\n        // Enter key handlers\n        document.getElementById('loginPassword')?.addEventListener('keypress', (e) => {\n            if (e.key === 'Enter') {\n                document.getElementById('loginBtn')?.click();\n            }\n        });\n\n        document.getElementById('registerPasswordConfirm')?.addEventListener('keypress', (e) => {\n            if (e.key === 'Enter') {\n                document.getElementById('registerBtn')?.click();\n            }\n        });\n    }\n\n    private setupWebSocketHandlers(): void {\n        wsService.on('connection_status', ({ connected, error }) => {\n            if (error) {\n                uiManager.updateConnectionStatus(false, 'Ошибка подключения');\n            } else {\n                uiManager.updateConnectionStatus(connected, connected ? 'Подключено' : 'Подключение...');\n            }\n        });\n\n        wsService.on('auth_success', () => {\n            console.log('WebSocket authenticated');\n        });\n\n        wsService.on('auth_error', (data) => {\n            console.error('WebSocket auth failed:', data.error);\n            this.logout();\n        });\n\n        wsService.on('message', ({ message }) => {\n            this.handleIncomingMessage(message);\n        });\n\n        wsService.on('online_users', ({ users }) => {\n            this.onlineUsers = new Set(users);\n            this.updateOnlineStatuses();\n        });\n\n        wsService.on('typing', ({ from, isTyping }) => {\n            this.handleTypingIndicator(from, isTyping);\n        });\n\n        wsService.on('messages_read', ({ messageIds, by }) => {\n            this.handleMessagesRead(messageIds, by);\n        });\n\n        wsService.on('ping', () => {\n            wsService.send({ type: 'pong' });\n        });\n    }\n\n    // Auth methods\n    async login(username: string, password: string): Promise<void> {\n        try {\n            uiManager.setButtonLoading('loginBtn', true, 'Вход...');\n            \n            const user = await authService.login(username, password);\n            \n            uiManager.updateUserInfo(user);\n            uiManager.showMessengerScreen();\n            \n            await this.loadUsers();\n            await requestNotificationPermission();\n            \n        } catch (error: any) {\n            uiManager.showError('loginMessage', error.message || 'Ошибка авторизации');\n        } finally {\n            uiManager.setButtonLoading('loginBtn', false);\n        }\n    }\n\n    async register(username: string, password: string, passwordConfirm: string): Promise<void> {\n        try {\n            if (!username || !password) {\n                uiManager.showError('registerMessage', 'Пожалуйста, заполните все поля');\n                return;\n            }\n\n            if (username.length < 3) {\n                uiManager.showError('registerMessage', 'Логин должен содержать минимум 3 символа');\n                return;\n            }\n\n            if (password.length < 6) {\n                uiManager.showError('registerMessage', 'Пароль должен содержать минимум 6 символов');\n                return;\n            }\n\n            if (password !== passwordConfirm) {\n                uiManager.showError('registerMessage', 'Пароли не совпадают');\n                return;\n            }\n\n            uiManager.setButtonLoading('registerBtn', true, 'Регистрация...');\n            \n            await authService.register(username, password);\n            \n            uiManager.showSuccess('registerMessage', 'Регистрация успешна! Войдите в систему');\n            \n            setTimeout(() => {\n                uiManager.showLoginForm();\n            }, 1500);\n            \n        } catch (error: any) {\n            uiManager.showError('registerMessage', error.message || 'Ошибка регистрации');\n        } finally {\n            uiManager.setButtonLoading('registerBtn', false);\n        }\n    }\n\n    logout(): void {\n        authService.logout();\n        this.currentChat = null;\n        this.users = [];\n        this.chats = [];\n        this.unreadMessages.clear();\n        this.onlineUsers.clear();\n        uiManager.showAuthScreen();\n        uiManager.showLoginForm();\n    }\n\n    // User and chat management\n    async loadUsers(): Promise<void> {\n        try {\n            const data = await httpClient.getUsers();\n            this.users = data.users;\n            this.updateChatsList();\n        } catch (error) {\n            console.error('Failed to load users:', error);\n        }\n    }\n\n    private updateChatsList(): void {\n        this.chats = this.users.map(user => ({\n            username: user.username,\n            userId: user.userId,\n            online: this.onlineUsers.has(user.username),\n            unreadCount: this.unreadMessages.get(user.username) || 0,\n        }));\n\n        uiManager.renderChatsList(this.chats);\n    }\n\n    async openChat(username: string): Promise<void> {\n        const user = this.users.find(u => u.username === username);\n        if (!user) return;\n\n        this.currentChat = {\n            username: user.username,\n            userId: user.userId,\n            online: this.onlineUsers.has(user.username),\n        };\n\n        // Clear unread count\n        this.unreadMessages.delete(username);\n        this.updateChatsList();\n\n        // Load messages\n        try {\n            const data = await httpClient.getMessages(username);\n            // Render chat UI with messages\n            // TODO: Implement full chat rendering\n            console.log('Loaded messages:', data.messages);\n        } catch (error) {\n            console.error('Failed to load messages:', error);\n        }\n    }\n\n    async sendMessage(text: string): Promise<void> {\n        if (!this.currentChat || !text.trim()) return;\n\n        try {\n            await httpClient.sendMessage(this.currentChat.username, {\n                text: text.trim(),\n            });\n\n            // Message will be added via WebSocket event\n        } catch (error) {\n            console.error('Failed to send message:', error);\n        }\n    }\n\n    private handleIncomingMessage(message: Message): void {\n        const fromUser = message.from;\n        const isCurrentChat = this.currentChat && this.currentChat.username === fromUser;\n\n        if (isCurrentChat) {\n            // Add to current chat\n            const html = uiManager.renderMessage(message, false);\n            uiManager.appendMessage(html);\n\n            // Mark as read\n            wsService.send({\n                type: 'mark_read',\n                from: fromUser,\n            });\n\n            // Play sound\n            audioService.playNotificationSound();\n        } else {\n            // Increment unread count\n            const current = this.unreadMessages.get(fromUser) || 0;\n            this.unreadMessages.set(fromUser, current + 1);\n\n            // Play notification\n            audioService.playNotificationSound();\n            showBrowserNotification(\n                `Новое сообщение от ${fromUser}`,\n                message.text || '[Медиа]',\n                fromUser\n            );\n\n            // Update chats list\n            this.updateChatsList();\n        }\n    }\n\n    private updateOnlineStatuses(): void {\n        this.updateChatsList();\n    }\n\n    private handleTypingIndicator(from: string, isTyping: boolean): void {\n        if (this.currentChat && this.currentChat.username === from) {\n            // Update typing indicator in UI\n            console.log(`${from} is ${isTyping ? 'typing' : 'not typing'}`);\n        }\n    }\n\n    private handleMessagesRead(messageIds: string[], by: string): void {\n        if (this.currentChat && this.currentChat.username === by) {\n            // Update read status in UI\n            messageIds.forEach(id => {\n                const messageEl = document.querySelector(`[data-message-id=\"${id}\"]`);\n                if (messageEl) {\n                    const readIcon = messageEl.querySelector('.message-read-status svg');\n                    if (readIcon) {\n                        readIcon.classList.add('read');\n                        const useEl = readIcon.querySelector('use');\n                        if (useEl) {\n                            useEl.setAttribute('href', '#icon-check-double');\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n    // UI helper methods for inline handlers\n    openImage(url: string): void {\n        const modal = document.getElementById('imageModal');\n        const img = document.getElementById('imageModalImg') as HTMLImageElement;\n        if (modal && img) {\n            img.src = url;\n            modal.classList.add('active');\n        }\n    }\n\n    scrollToMessage(messageId: string): void {\n        const messageEl = document.querySelector(`[data-message-id=\"${messageId}\"]`);\n        if (messageEl) {\n            messageEl.scrollIntoView({ behavior: 'smooth', block: 'center' });\n        }\n    }\n}\n\n// Initialize app when DOM is ready\nconst app = new MessengerApp();\n\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => app.init());\n} else {\n    app.init();\n}\n\nexport default app;\n"],"names":["HttpClient","baseUrl","token","endpoint","options","headers","response","data","username","password","otherUser","to","messageData","query","file","formData","httpClient","WebSocketService","protocol","event","error","message","handler","handlers","index","type","payload","wsService","EncryptionService","key","encryptionKey","iv","encrypted","encryptedData","decryptionKey","decrypted","encryptionService","AuthService","userId","authService","AudioService","source","resolve","reject","blob","track","audioContext","oscillator","gainNode","audioService","escapeHtml","text","div","formatTime","timestamp","date","diff","diffDays","getAvatarColor","colors","hash","i","requestNotificationPermission","showBrowserNotification","title","body","tag","UIManager","_a","_b","_c","_d","loginForm","registerForm","loginMsg","registerMsg","elementId","el","user","userNameEl","userAvatarEl","color1","color2","connected","statusEl","textEl","chats","chatsListEl","html","chat","unreadBadge","onlineBadge","isSent","time","sentClass","replyHtml","contentHtml","editedTag","read","messagesArea","temp","messageEl","chatArea","buttonId","loading","originalText","btn","uiManager","SVG_ICONS","createSVGIcon","iconName","width","height","className","iconContent","initSVGSprite","svg","defs","name","content","symbol","AuthComponent","MessengerComponent","ProfileComponent","SettingsComponent","MessengerApp","appContainer","authComponent","messengerComponent","profileComponent","settingsComponent","e","passwordConfirm","_e","_f","_g","users","from","isTyping","messageIds","by","u","fromUser","current","id","readIcon","useEl","url","modal","img","messageId","app"],"mappings":"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"}